#! /bin/bash
#==========================================================================
# File        : cres
# Description : Create script.  Prompt for a filename if one isn't specified
#               on the command line.  Check if the file exists.  Add the basic
#               lines to the script and then make it executable
#
# Revision History: 
#
#   10 Aug 1999 - Brian Marshall
#      Initial Version.
#==========================================================================
#--------------------------------------------------------------------------
# Includes
#--------------------------------------------------------------------------
. ~/bin/functions/getKey
. ~/bin/functions/lower

#--------------------------------------------------------------------------
# What kind of script hull shall we create?  This can be specified by using
# the -t option (-t a for awk, -t b for bash and so on).  Default: bash
#--------------------------------------------------------------------------
getopts :t: cmdLine
case "$cmdLine" in
   t) 
      case $OPTARG in
         a*) prgm="$(which gawk) -f"    ;;
         b*) prgm=$(which bash)         ;;
         g*) prgm='/usr/bin/env groovy' ;;
         k*) prgm=$(which ksh)          ;;
         p*) prgm=$(which perl)         ;;
         r*) prgm=$(which ruby)         ;;
         s*) prgm="$(which sed) -nf"    ;;
         y*) prgm=$(which python)       ;;
         ?)  echo "Usage: $(basename $0) [-t [abgkprsy]]"; exit ;;
      esac
      ;;
   ?) prgm=$(which bash) ;;
esac

#--------------------------------------------------------------------------
# Shift away the -t and option
#--------------------------------------------------------------------------
shift $(( OPTIND - 1 ))

#--------------------------------------------------------------------------
# Get the filename either from the command line if specified or after 
# prompting the user for it.  Here's how this works: If a command line arg
# is specified, it is stored in $1.  If this is defined, assign it to
# fileName.  Otherwise, prompt the user for a fileName (read -p "prompt"),
# read the user's input into resp and return it.
#--------------------------------------------------------------------------
fileName=${1:-$(read -p "Enter fileName: " resp; echo $resp)}

#--------------------------------------------------------------------------
# Loop until fileName is not empty (-n) and (-a or &&) a file by that name
# does not exist (! -e)
#--------------------------------------------------------------------------
until [[ -n "$fileName" && ! -e "$fileName" ]]
do
   #-----------------------------------------------------------------------
   # If fileName is empty (-z for zero) the re-prompt the user and start
   # at the top of the loop again (continue)
   #-----------------------------------------------------------------------
   if [[ -z "$fileName" ]]; then
      read -p "Enter fileName: " fileName
      continue
   fi
   #-----------------------------------------------------------------------
   # If we get here, the file exists, so ask the user if it should be
   # overwritten. Here the -n argument specifies 'no new line'.  
   # getKey is a function which retrieves 1 character from the keyboard. -l
   # specifies to convert it to lower case (-u upper).  
   # If the user types 'y' or 'Y', break out of the until loop...
   # Note: the [[ ]] syntax is exclusively Korn Shell. In the above if 
   # statement single brackets are used ([ ]), which is Bourne shell syntax
   #-----------------------------------------------------------------------
   echo -n "$fileName exists. Overwrite (y/n)? "
   if [[ $(getKey -l) == 'y' ]] ; then
      break
   fi
   #-----------------------------------------------------------------------
   # ... otherwise prompt the user for another file name
   #-----------------------------------------------------------------------
   echo
   read -p "Enter fileName: " fileName
done

#--------------------------------------------------------------------------
# Get the user's name, which is field 5 of the /etc/passwd (GCOS). Do 
# this by grep'ing for the user's id (id -un on Linux) or login name (LOGNAME)
# in the /etc/passwd file and then cutting out the fifth colon delimited field
# Linux: userName=$(grep $(id -un) /etc/passwd | cut -d: -f5)
#--------------------------------------------------------------------------
userName=$(grep "^$LOGNAME:" /etc/passwd | cut -d: -f5)

#--------------------------------------------------------------------------
# An example of a 'here' document.  It says cat (write) to $fileName every
# thing after the marker EOF and before that same marker.  The '-' (<<-)
# says that leading tabs are allowed and will be stripped before writing
# the here document to the file
#--------------------------------------------------------------------------
cat > $fileName <<-EOF
	#! /usr/bin/env groovy 
	/*==========================================================================
	 | File            : $fileName
	 | Description     : 
	 |
	 | Revision History: 
	 |
	 |  $(date +"%d %h %Y") - $userName
	 |     Initial Version.
	 +=======================================================================*/
	
	EOF

#--------------------------------------------------------------------------
# Make the file executable (or chmod u+rwx,go-w,go+rx $fileName)
#--------------------------------------------------------------------------
chmod 0755 $fileName

#--------------------------------------------------------------------------
# 'vi +11 fileName' means vi fileName and place the cursor on line 11.
# We want to place the cursor on the last line of fileName so that the user
# can immediately start editing the script.  Therefore first calculate the
# number of lines in the file: line=$(wc -l $fileName | awk '{print $1}').
# Then overlay vi : exec vi +$line $fileName.  These two steps can be 
# combined:
#--------------------------------------------------------------------------
exec $EDITOR +$(wc -l $fileName | awk '{print $1}') $fileName
